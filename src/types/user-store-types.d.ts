import type { ComputedRef, Ref } from "vue";
import type { UserVM } from "./@/models/UserVM";
import type { StoreBaseActions, StoreBaseState } from "./store-base-types";
import type {
  UserVMEditAvatarFile,
  UserVmEditForInput,
  UserVMNewFormInput,
  UserVMRegWithEmailAndPassword,
  UserVMWithActivity,
} from "./userVm-types";

export interface UserStoreState extends StoreBaseState<UserVM> {
  authUserId: Ref<string | null>;
}

export interface UserStoreGetters {
  getAuthUser: ComputedRef<UserVMWithActivity | undefined>;
  getUserByIdFn: ComputedRef<(id: string) => UserVMWithActivity | undefined>;
}

export interface UserStoreActions extends StoreBaseActions {
  /**
   * Forces and awaits for Firestore Auth to find out authenticated user state.
   * @returns A promise that resolves to boolean: is authenticated or not.
   */
  forceInitFireBaseAuthState(): Promise<boolean>;
  /**
   * Sings in user using Firebase Auth `password` method.
   * @returns Id of signed in user.
   */
  signInWithEmailAndPassword(email: string, password: string): Promise<void>;
  signInWithGoogle(): Promise<void>;
  signOut(): Promise<void>;
  reAuthenticate(email: string, password: string): Promise<void>;
  /**
   * Registers user using Firebase Auth `password` method.
   * @param dto
   * @returns Id of registered user.
   */
  registerUserWithEmailAndPassword(
    dto: UserVMRegWithEmailAndPassword
  ): Promise<string>;
  /**
   * Creates user to app's database.
   * @param id Generated by Firebase Auth.
   * @param dto
   * @param fetchAfter Conditionally fetch new user after creation, default: `false`.
   * @returns Id of registered and created user.
   */
  createUser(
    id: string,
    dto: UserVMNewFormInput,
    loginStatsDto?: UserVMCreateLoginStats,
    fetchAfter?: boolean
  ): Promise<string>;
  editUser(
    dto: UserVmEditForInput,
    fetchAfter?: boolean,
    password?: string
  ): Promise<void>;
  /**
   * Uploads avatar file to Google Firebase Storage and returns URL of it.
   * @returns URL of the uploaded avatar image file.
   */
  updateAvatar(dto: UserVMEditAvatarFile): Promise<string>;
  updateEmail(email: string): Promise<void>;
  updatePassword(password: string): Promise<void>;
  fetchUser(id: string): Promise<UserVM | undefined>;
  fetchUsers(ids?: Array<string>): Promise<Array<UserVM>>;
  /**
   * It is important to call `clearDbSubscriptionAuthUser` action exclusively,
   * when this actions has been called. It uses distinct unsubscription logic.
   */
  fetchAuthUser(): Promise<UserVM | undefined>;
  clearDbSubscriptionAuthUser(): void;
}

export interface UserVMCreateLoginStats {
  lastVisitAt: Date | undefined;
  registeredAt: Date | undefined;
}
