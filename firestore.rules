rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function userIsLoggedIn() {
      return request.auth != null
    }

    function resxBelongsToUser() {
      return request.auth.uid == resource.data.userId
    }

    function isNewResx() {
      return resource == null
    }

    function canWriteResx() {
      return userIsLoggedIn() && (isNewResx() || resxBelongsToUser())
    }

    function isOnlyAppendingPostAndContributor() {
      return userIsLoggedIn()
        && resxBelongsToUser()
        && request.resource.data.diff(resource.data).affectedKeys().hasOnly(["posts", "contributors"])
    }

    function isOnlyAppendingThread() {
      return resxBelongsToUser()
        && resxBelongsToUser()
        && request.resource.data.diff(resource.data).affectedKeys().hasOnly(["threads"])
    }

    match /{document=**} {
      allow read: if true
    }

    match /threads/{thread} {
      allow write: if canWriteResx()

      allow update: if isOnlyAppendingPostAndContributor()
    }

    match /posts/{post} {
      allow write: if canWriteResx()

      allow update: if isOnlyAppendingThread()
    }

    match /users/{user} {
      allow create: if true

      allow update: if request.auth.uid == resource.id
    }
  }
}
