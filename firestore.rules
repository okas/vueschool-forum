rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function userIsLoggedIn() {
      return request.auth != null
    }

    function resxBelongsToUser() {
      return request.auth.uid == resource.data.userId
    }

    function isNewResx() {
      return resource == null
    }

    function canWriteResx() {
      return userIsLoggedIn() && isNewResx()
    }

    function hasUserOwnDocPreReqMet() {
      return userIsLoggedIn() && resxBelongsToUser()
    }

    function canUpdateForum() {
      return userIsLoggedIn()
        && request.resource.data.diff(resource.data).affectedKeys()
          .hasAny(["lastPostId", "threads"])
    }

    function canUpdateThread() {
      return hasUserOwnDocPreReqMet()
        && request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(["lastPostAt", "lastPostId", "title", "contributors", "posts"])
    }

    function canUpdatePost() {
      return hasUserOwnDocPreReqMet()
        && request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(["text", "edited"])
    }

    match /{document=**} {
      allow read: if true
    }

    match /forums/{forum} {
      // TODO: Functionality not yet implemented.
      // allow create: if canWriteResx()

      allow update: if canUpdateForum()
    }

    match /threads/{thread} {
      allow create: if canWriteResx()

      allow update: if canUpdateThread()
    }

    match /posts/{post} {
      allow create: if canWriteResx()

      allow update: if canUpdatePost()
    }

    match /users/{user} {
      allow create: if true

      allow update: if request.auth.uid == resource.id
    }
  }
}
